class Flock {
  //Position
  position 0 0 0 0;
    
  //Classes utilis??es
  * -- * Imp;
  * -- * Rot;
  * -- * Pos;
   
  //Liste des variables
  int                  n_birds;
  int                  n_drones;
  real_t               i_rep;
  real_t               i_all;
  real_t               i_att;
  real_t               i_noi;
  real_t               r_rep;
  real_t               r_all;
  real_t               t_att;
  real_t               v0;
  vector_real_t        l_speed;
  vector_real_t        l_speed_prec;
  vector_pos           l_pos;
  vector_pos           l_pos_prec;
  vector_vector_real_t t_dist;
  sf_texture           texture;
  sf_sprite            sprite;
      
  //Liste des m??thodes
  //format:
  //type_entr??e(self exclu)->type_sortie
  vect_vect_real_t tab_dist    ();
  vector_real_t                   speed_boids ();
  vector_pos                      pos_boids   ();
  vector_real_t                   speed_boids ();
  vector_pos                      pos_boids   ();
  real_t**4->void set_Intensities (I_rep osef,I_all osef,I_att osef,I_noi osef);
  real_t**3->void set_Radii       (r_rep osef,r_all osef,r_att osef);
  real_t->void set_Speed          (v0 osef);
  void update_flock();
  void old_update_flock();
  RenderWindow&->void draw(window osef);
  int**3*bool**2*ofstream&->void store_data (itteration osef,N_dt osef, proj osef, tp osef, is_drone osef, file osef);
};

class Pos {
  //Position
  position 650 50 200 250;
  
  //Classes utilis??es
  * -- * Imp;
  * -- * Rot;
  
  //Liste des m??thodes
  real_t->void  move       (r osef){};
  Rot->void     turn       (A osef){};
  Pos->Imp      move_view  (p osef){};
  Pos->Vec2     angle_view (p osef){};
  Pos->real_t   dist       (p osef){};
  real_t        x (){};
  real_t        y (){};
  real_t        z (){};
  real_t        t (){};
  real_t        p (){};
};

  
class Rot {
  //Position
  position 450 250 125 150;
  
  //Liste des variables
  real_t theta;
  real_t phi;
  
  //Liste des m??thodes
  Rot->void    +=       (o osef){};
  Rot->void    -=       (o osef){};
  Rot->Rot     +        (o osef){};
  Void->Rot    -        (){};
  Rot->Rot     -        (o osef){};
  real_t->void *=       (k osef){};
  real_t->void /=       (k osef){};
  real_t->Rot  *        (k osef){};
  real_t->Rot  /        (k osef){};
  real_t       direction() {};
  real_t 	   theta    () {};
};

  
  
class Imp {
  //Position
  position 100 300 0 0
  
  //Liste des variables
  real_t x;
  real_t y;
  real_t z;
  
  //Liste des m??thodes
  Imp->void          +=       (o osef){};
  Imp->void          -=       (o osef){};
  Imp->Imp           +        (o osef){};
  Void->Imp          -        (){};
  Imp->Imp           -        (o osef){};
  real_t->void       *=       (k osef){};
  real_t->void       /=       (k osef){};
  real_t->Imp        *        (k osef){};
  real_t->Imp        /        (k osef){};
  Imp->real_t        |        (o osef){};
  real_t             norm2    (){};
  real_t             !        (){};
  real_t*real_t->Imp rotate   (theta osef, phi osef){};
  real_t*real_t->Imp u_angle  (theta osef, phi osef){};  
  real_t->Imp        rotate   (theta osef){};
  real_t->Imp        u_angle  (theta osef){}; 
  real_t             direction() {};
};
  

  
class Free3d {
  //Classe d??rivant de 
  isA Pos;
  
  //Position
  position 700 350 125 150;
  
  //Liste des variables
  real_t x_coord;
  real_t y_coord;
  real_t z_coord;
  real_t theta_angle;
  real_t phi_angle;
};

class Sphere {
  //Classe d??rivant de 
  isA Pos;
  
  //Position
  position 750 350 125 125;
  
  //Liste des variables
  real_t theta_coord;
  real_t phi_coord;
  real_t theta_angle;
  real_t phi_angle;
};